# Generated by Django 3.0.6 on 2020-05-17 11:09

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import secretgraph.server.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('flexid', models.UUIDField(blank=True, null=True, unique=True)),
                ('publicInfo', models.TextField(db_column='public_info')),
                ('public', models.BooleanField(blank=True, default=False)),
                ('markForDestruction', models.DateTimeField(blank=True, db_column='mark_for_destruction', null=True)),
                ('featured', models.BooleanField(blank=True, default=False)),
                ('group', models.SmallIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('flexid', models.UUIDField(blank=True, null=True, unique=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('markForDestruction', models.DateTimeField(blank=True, db_column='mark_for_destruction', null=True)),
                ('nonce', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to=secretgraph.server.models.get_file_path)),
                ('contentHash', models.CharField(blank=True, db_column='content_hash', max_length=255, null=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='secretgraph.Cluster')),
            ],
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('tag', models.TextField()),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info', to='secretgraph.Content')),
            ],
        ),
        migrations.CreateModel(
            name='ContentReference',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('group', models.CharField(blank=True, default='', max_length=255)),
                ('extra', models.TextField(blank=True, default='')),
                ('deleteRecursive', models.BooleanField(blank=True, db_column='delete_recursive', default=True, null=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='references', to='secretgraph.Content')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referencedBy', to='secretgraph.Content')),
            ],
        ),
        migrations.CreateModel(
            name='ContentAction',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('used', models.BooleanField(blank=True, default=False)),
                ('group', models.CharField(blank=True, default='', max_length=255)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='secretgraph.Content')),
            ],
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('keyHash', models.CharField(db_column='key_hash', max_length=255)),
                ('nonce', models.CharField(max_length=255)),
                ('value', models.BinaryField()),
                ('start', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('stop', models.DateTimeField(blank=True, null=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='secretgraph.Cluster')),
                ('contentAction', models.OneToOneField(
                    blank=True, null=True, db_column="content_action",
                    on_delete=django.db.models.deletion.CASCADE, related_name='action', to='secretgraph.ContentAction'
                )),
            ],
        ),
        migrations.AddConstraint(
            model_name='contentreference',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, source=django.db.models.expressions.F('target')), name='contentreference_no_self_ref'),
        ),
        migrations.AddConstraint(
            model_name='contentreference',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('group', 'key'), ('group', 'transfer'), _connector='OR'), _negated=True), ('deleteRecursive__isnull', True), _connector='OR'), name='contentreference_key'),
        ),
        migrations.AddConstraint(
            model_name='contentreference',
            constraint=models.UniqueConstraint(fields=('source', 'target', 'group'), name='contentreference_unique'),
        ),
        migrations.AddConstraint(
            model_name='contentaction',
            constraint=models.UniqueConstraint(fields=('content', 'group'), name='contentaction_unique'),
        ),
        migrations.AddConstraint(
            model_name='content',
            constraint=models.UniqueConstraint(fields=('contentHash', 'cluster_id'), name='unique_content'),
        ),
        migrations.AddConstraint(
            model_name='action',
            constraint=models.CheckConstraint(check=models.Q(('start__lte', django.db.models.expressions.F('stop')), ('stop__isnull', True), _connector='OR'), name='action_order'),
        ),
        migrations.AddConstraint(
            model_name='action',
            constraint=models.CheckConstraint(check=models.Q(('start__isnull', False), ('stop__isnull', False), _connector='OR'), name='action_exist'),
        ),
        migrations.AddConstraint(
            model_name='contenttag',
            constraint=models.UniqueConstraint(fields=('content', 'tag'), name='unique_content_tag'),
        ),
    ]
